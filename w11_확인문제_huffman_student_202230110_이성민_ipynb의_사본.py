# -*- coding: utf-8 -*-
"""W11_확인문제_Huffman_student - 202230110 이성민.ipynb의 사본

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16aAXqUAzc--5qQsdOl_4bqfVjpksIuiB

# 다음 표의 캐릭터와 빈도수로 얻어진 값을 호프만 코드로 만드는 파이썬 클래스 HuffmanNode 를 작성하라. 아래 클래스 틀을 활용하라.
"""

import heapq

class HuffmanNode :
  def __init__(self, frequency, symbol = None, left = None,  right = None) :
    self.frequency = frequency
    self.symbol = symbol
    self.left = left
    self.right = right

  # Helper method to check if a node is a leaf (has no children)
  def is_leaf(self) :
    return self.left is None and self.right is None

  def __lt__(self, other) : # 두개의 다른 노드의 빈도를 비교하여 False True 반환
    return self.frequency < other.frequency

class HuffmanCoding :
  def __init__(self, frequencies) : # frequencies -> dict, with char: freq
        # Initialize with a list of Huffman nodes for each character
    self.nodes = [HuffmanNode(freq,symbol) for symbol, freq in frequencies.items()]
    self.codes = {}
    self.tree_root() # 나중에 변수 사용을 위해 값 처리

  def tree_root(self) : # 트리의 루트 반환하는 함수 (과정 중에 함수 내에서 트리 구조 정립)
    heapq.heapify(self.nodes) # 최소 순서 나열
    while len(self.nodes) > 1 : # 리스트에 한개가 남기 전까지 while 반복
      left = heapq.heappop(self.nodes) # 첫번째 요소 : 첫번째 최소값 pop -> 리스트 내 삭제
      right = heapq.heappop(self.nodes) # 첫번째 요소 : 두번째 최소값 pop -> 리스트 내 삭제
      merged = HuffmanNode(left.frequency + right.frequency, left = left, right = right) # 빈도수 결합한 튜플 형태?
      heapq.heappush(self.nodes, merged) # heap은 요소 적용 안됨
      # while 구문에서의 heapq를 통해 트리구조 정립 완료
    root = self.nodes[0] # self.nodes 에 하나의 노드만 남음
    return root # 트리 구조의 root 노드 반환

  def get_codes(self, node = None, current_code = None) :
    # 재귀적으로 이진코드 만들어보기
    if node == None :
      node = self.tree_root() # 초기 입력 없으면 node가 root
    if current_code == None :
      current_code = '' # 초기의 현재 코드는 빈 문자열
    if node.is_leaf() :
      self.codes[node.symbol] = current_code
      return # 입력받은 노드가 리프노드의 경우 함수 종료

    if node.left != None :
      self.get_codes(node.left, current_code + '1')
    if node.right != None :
      self.get_codes(node.right, current_code + '0')
    return self.codes

# Example usage
if __name__ == "__main__":
    # Input frequencies as per Table 9.1.2
    frequencies = {
        '!': 2,
        '@': 3,
        '#': 7,
        '$': 8,
        '%': 12
    }

    # Create HuffmanCoding instance and get the codes
    huffman_coding = HuffmanCoding(frequencies)
    codes = huffman_coding.get_codes()

    # Output the resulting Huffman codes
    print("Huffman Codes for the given frequencies:")
    for symbol, code in codes.items():
        print(f"{symbol}: {code}")